module Skargo;

private fun fetchLatestManifest(
  name: String,
  constraint: TomlManifestDependency,
  reps: Array<String>,
): ?TomlManifest {
  constraint.path match {
  | Some(path) ->
    return Some(TomlManifest::read(Path.join(path, kManifestFile)))
  | _ -> void
  };

  constraint.version match {
  | None() -> invariant_violation("unreachable")
  | Some(r) ->
    // Fetch highest available version within range.
    optLast: ?TomlManifest = None();
    for (repo in reps) {
      dir = Path.join(repo, name);
      mFile = Path.join(dir, kManifestFile);
      if (FileSystem.exists(mFile)) {
        manifest = TomlManifest::read(mFile);
        if (r.matches(manifest.version)) {
          !optLast = optLast match {
          | Some(
            last,
          ) if (r.matches(last.version) && last.version < manifest.version) ->
            Some(manifest)
          | None() -> Some(manifest)
          | _ -> optLast
          }
        };
      }
    };
    optLast
  }
}

// TODO: Backtrack on conflict, and try previous versions.
private fun solveDependencies(
  manifest: TomlManifest,
  solved: mutable Map<String, TomlManifest>,
  reps: Array<String>,
): ?UnsatisfiableDependency {
  for ((name, constraint) in manifest.dependencies.items()) {
    if (solved.containsKey(name)) {
      fetchLatestManifest(name, constraint, reps) match {
      | Some(depManifest) if (depManifest.version == solved[name].version) ->
        void
      | _ ->
        return Some(UnsatisfiableDependency(manifest.path, name, constraint))
      }
    } else {
      fetchLatestManifest(name, constraint, reps) match {
      | Some(depManifest) ->
        solved.set(name, depManifest);
        res = solveDependencies(depManifest, solved, reps);
        if (res.isSome()) {
          return res
        }
      | _ ->
        return Some(UnsatisfiableDependency(manifest.path, name, constraint))
      }
    };
  };
  None()
}

class UnsatisfiableDependency(
  path: String,
  name: String,
  constraint: TomlManifestDependency,
) extends Exception {}

fun getDependencies(
  manifest: TomlManifest,
  reps: Array<String>,
): Result<Map<String, TomlManifest>, Exception> {
  result = mutable Map[manifest.name => manifest];
  solveDependencies(manifest, result, reps)
    .map(e -> Failure(e))
    .default(Success(result.chill()));
}

module end;
