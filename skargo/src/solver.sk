module Skargo;

private fun fetchLatestManifest(
  name: String,
  constraint: VersionConstraint,
  reps: Array<String>,
): ?Manifest {
  constraint match {
  | PathConstraint(path, _) ->
    Some(Manifest::read(Path.join(path, kManifestFile)))
  | r @ RangeConstraint _ ->
    // Fetch highest available version within range.
    optLast: ?Manifest = None();
    for (repo in reps) {
      dir = Path.join(repo, name);
      mFile = Path.join(dir, kManifestFile);
      if (FileSystem.exists(mFile)) {
        manifest = Manifest::read(mFile);
        if (contains(r, manifest.version)) {
          !optLast = optLast match {
          | Some(
            last,
          ) if (contains(r, last.version) && last.version < manifest.version) ->
            Some(manifest)
          | None() -> Some(manifest)
          | _ -> optLast
          }
        };
      }
    };
    optLast
  }
}

private fun contains(range: RangeConstraint, version: Version): Bool {
  range.low <= version && range.high.map(h -> version < h).default(true)
}

// TODO: Backtrack on conflict, and try previous versions.
private fun solveDependencies(
  manifest: Manifest,
  solved: mutable Map<String, Manifest>,
  reps: Array<String>,
): ?UnsatisfiableDependency {
  for ((name, constraint) in manifest.dependencies.items()) {
    if (solved.containsKey(name)) {
      fetchLatestManifest(name, constraint, reps) match {
      | Some(depManifest) if (depManifest.version == solved[name].version) ->
        void
      | _ ->
        return Some(UnsatisfiableDependency(manifest.path, name, constraint))
      }
    } else {
      fetchLatestManifest(name, constraint, reps) match {
      | Some(depManifest) ->
        solved.set(name, depManifest);
        res = solveDependencies(depManifest, solved, reps);
        if (res.isSome()) {
          return res
        }
      | _ ->
        return Some(UnsatisfiableDependency(manifest.path, name, constraint))
      }
    };
  };
  None()
}

class UnsatisfiableDependency(
  path: String,
  name: String,
  constraint: VersionConstraint,
) extends Exception {}

fun getDependencies(
  manifest: Manifest,
  reps: Array<String>,
): Result<Map<String, Manifest>, Exception> {
  result = mutable Map[manifest.name => manifest];
  solveDependencies(manifest, result, reps)
    .map(e -> Failure(e))
    .default(Success(result.chill()));
}

// FIXME: What happens with path constraints when the given name does not match
// the manifest name of the dependency? We should ensure they match.
fun topologicalSort(
  root: String,
  manifests: Map<String, Manifest>,
): Array<String> {
  queue = mutable Vector[root];
  pos = 0;

  while (pos < queue.size()) {
    current = queue[pos];
    !pos = pos + 1;

    for (dep in manifests[current].dependencies.keys()) {
      // TODO: The call to `take()` is expensive.
      if (queue.take(pos).find(x -> x == dep) is Some _) continue;
      queue.push(dep)
    }
  };

  queue.collect(Array).reversed()
}

module end;
