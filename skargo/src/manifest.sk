module Skargo;

// TODO: Add support for `git` repositories as a package location.
class TomlManifestDependency{
  version: ?Semver.VersionReq = None(),
  path: ?String = None(),
} {
  static fun fromTOML(
    basePath: String,
    toml: TOML.Value,
  ): TomlManifestDependency {
    toml match {
    | TOML.String(v) ->
      TomlManifestDependency{version => Some(Semver.VersionReq::fromString(v))}
    | t @ TOML.Table _ ->
      t.maybeGetString("path") match {
      | Some(path) ->
        TomlManifestDependency{
          // FIXME: This breaks on absolute paths.
          path => Some(Path.join(basePath, path)),
          version => t
            .maybeGetString("version")
            .map(Semver.VersionReq::fromString),
        }
      | _ -> invariant_violation("TODO")
      }
    | _ -> invariant_violation("Invalid dependency specification.")
    }
  }
}

class TargetTriple(
  machine: String,
  vendor: ?String,
  operatingsystem: ?String,
) uses Orderable, Show {
  //
  static fun fromString(str: String): TargetTriple {
    components = str.split("-");
    if (components.isEmpty() || components.size() > 3) {
      invariant_violation("Invalid target triplet string " + str)
    };
    TargetTriple(
      components[0],
      components.maybeGet(1) match {
      | Some(v) if (v != "unknown") -> Some(v)
      | _ -> None()
      },
      components.maybeGet(2) match {
      | Some(v) if (v != "unknown") -> Some(v)
      | _ -> None()
      },
    )
  }

  fun isWasm32(): Bool {
    this.machine == "wasm32"
  }

  fun allows(target: TargetTriple): Bool {
    this.machine == target.machine &&
      this.vendor.default("unknown") == target.vendor.default("unknown") &&
      this.operatingsystem.default("unknown") ==
        target.operatingsystem.default("unknown")
  }

  fun toString(): String {
    `${this.machine}-${this.vendor.default(
      "unknown",
    )}-${this.operatingsystem.default("unknown")}`
  }
}

class TomlManifestBinary(name: String, main: String) uses Equality {
  static fun fromTOML(toml: TOML.Table): TomlManifestBinary {
    name = toml.getString("name");
    main = toml.getString("main");

    TomlManifestBinary(name, main)
  }
}

class TomlManifest{
  name: String,
  path: String,
  version: Semver.Version,
  srcs: Array<String>,
  tests: Array<String>,
  testHarness: String,
  dependencies: Map<String, TomlManifestDependency>,
  buildDependencies: Map<String, TomlManifestDependency>,
  bin: Array<TomlManifestBinary>,
} uses Equality {
  //
  fun ==(other: TomlManifest): Bool {
    this.name == other.name &&
      this.path == other.path &&
      this.version == other.version
  }

  static fun read(path: String): TomlManifest {
    basePath = Path.dirname(path);
    toml = TOML.decode(FileSystem.readTextFile(path));
    package = toml.getTable("package");
    name = package.getString("name");
    version = Semver.Version::fromString(package.getString("version"));

    srcs = package.maybeGetArray("srcs") match {
    | Some(arr) -> arr.map(x -> x.expectString())
    | _ ->
      FileSystem.readFilesRecursive(Path.join(basePath, "src"), f ->
        f.endsWith(".sk")
      ).toArray()
    };

    testHarness = package.maybeGetString("test-harness").default("SKTest.main");

    tests = package.maybeGetArray("tests") match {
    | Some(arr) -> arr.map(x -> x.expectString())
    | _ ->
      testsPath = Path.join(basePath, "tests");
      if (FileSystem.exists(testsPath)) {
        FileSystem.readFilesRecursive(testsPath, f ->
          f.endsWith(".sk")
        ).toArray()
      } else {
        Array[]
      }
    };

    dependencies = toml.getTable("dependencies").map.map((_, v) ->
      TomlManifestDependency::fromTOML(basePath, v)
    );

    buildDependencies = toml.maybeGetTable("build-dependencies") match {
    | Some(bDependencies) ->
      bDependencies.map.map((_, v) ->
        TomlManifestDependency::fromTOML(basePath, v)
      )
    | _ -> Map[]
    };

    bin = toml.maybeGetArray("bin") match {
    | Some(arr) -> arr.map(t -> TomlManifestBinary::fromTOML(t.expectTable()))
    | None() -> Array[]
    };

    TomlManifest{
      name,
      path => basePath,
      version,
      srcs,
      tests,
      testHarness,
      dependencies,
      buildDependencies,
      bin,
    }
  }
}

module end;
