module Skargo;

const kDefaultTestHarness: String = "SKTest.main";

// TODO: Add support for `git` repositories as a package location.
class TomlDependency{version: ?String = None(), path: ?String = None()} {
  static fun fromTOML(basePath: String, toml: TOML.Value): TomlDependency {
    toml match {
    | TOML.String(v) -> TomlDependency{version => Some(v)}
    | t @ TOML.Table _ ->
      t.maybeGetString("path") match {
      | Some(path) ->
        TomlDependency{
          // FIXME: This breaks on absolute paths.
          path => Some(Path.join(basePath, path)),
          version => t.maybeGetString("version"),
        }
      | _ -> invariant_violation("TODO")
      }
    | _ -> invariant_violation("Invalid dependency specification.")
    }
  }
}

class Dependency(
  name: String,
  source_id: SourceId,
  req: Semver.VersionReq,
  kind: DepKind,
) {
  static fun create(
    name: String,
    source_id: SourceId,
    version: ?String,
    kind: DepKind,
  ): Dependency {
    version_req = version match {
    | Some(req) -> Semver.VersionReq::fromString(req)
    | None() -> Semver.VersionReq::kStar
    };

    Dependency(name, source_id, version_req, kind)
  }

  static fun fromTomlDependency(
    toml_name: String,
    dep: TomlDependency,
    kind: DepKind,
  ): Dependency {
    source_id = (dep.path, dep.version) match {
    | (None(), None()) ->
      invariant_violation(
        `dependency ${toml_name} specified without providing a local path or a version.`,
      )
    | (Some(path), _) -> SourceId::from_path(path)
    | (None(), Some(_version)) ->
      invariant_violation("TODO: Package registries not implemented yet")
    };

    Dependency::create(toml_name, source_id, dep.version, kind)
  }
}

class SourceId(url: String, kind: SourceKind) {
  static fun from_path(path: String): SourceId {
    SourceId(path, PathSource())
  }
}

base class SourceKind {
  children =
  | PathSource()
  // | GitSource()
  // | RegistrySource()
}

base class DepKind {
  children =
  | NormalDep()
  | BuildDep()
  // | DevelopmentDep()
}

class TomlBinary(name: String, main: String) uses Equality {
  static fun fromTOML(toml: TOML.Table): TomlBinary {
    name = toml.getString("name");
    main = toml.getString("main");

    TomlBinary(name, main)
  }
}

class TomlManifest{
  name: String,
  version: String,
  tests: ?Array<String>,
  test_harness: ?String,
  dependencies: Map<String, TomlDependency>,
  build_dependencies: Map<String, TomlDependency>,
  bin: Array<TomlBinary>,
} {
  static fun read(path: String): TomlManifest {
    basePath = Path.dirname(path);
    toml = TOML.decode(FileSystem.readTextFile(path));
    package = toml.getTable("package");
    name = package.getString("name");
    version = package.getString("version");

    test_harness = package.maybeGetString("test-harness");

    tests = package.maybeGetArray("tests").map(arr ->
      arr.map(x -> x.expectString())
    );

    dependencies = toml.getTable("dependencies").map.map((_, v) ->
      TomlDependency::fromTOML(basePath, v)
    );

    build_dependencies = toml.maybeGetTable("build-dependencies") match {
    | Some(bDependencies) ->
      bDependencies.map.map((_, v) -> TomlDependency::fromTOML(basePath, v))
    | _ -> Map[]
    };

    bin = toml.maybeGetArray("bin") match {
    | Some(arr) -> arr.map(t -> TomlBinary::fromTOML(t.expectTable()))
    | None() -> Array[]
    };

    TomlManifest{
      name,
      version,
      tests,
      test_harness,
      dependencies,
      build_dependencies,
      bin,
    }
  }
}

class Manifest(
  package_id: PackageId,
  dependencies: Array<Dependency>,
  targets: Array<Target>,
  original: TomlManifest,
) {
  static fun read(path: String): Manifest {
    static::fromTomlManifest(TomlManifest::read(path), path)
  }

  static fun fromTomlManifest(
    manifest: TomlManifest,
    manifest_path: String,
  ): Manifest {
    package_root = Path.dirname(manifest_path);
    source_id = SourceId::from_path(package_root);
    package_id = PackageId(
      manifest.name,
      Semver.Version::fromString(manifest.version),
      source_id,
    );
    dependencies = manifest.dependencies
      .map((toml_name, toml_dep) ->
        Dependency::fromTomlDependency(toml_name, toml_dep, NormalDep())
      )
      .values()
      .collect(Array);
    build_dependencies = manifest.build_dependencies
      .map((toml_name, toml_dep) ->
        Dependency::fromTomlDependency(toml_name, toml_dep, BuildDep())
      )
      .values()
      .collect(Array);
    targets = manifest_targets(manifest, package_root);

    Manifest(
      package_id,
      dependencies.concat(build_dependencies),
      targets,
      manifest,
    )
  }
}

class PackageId(name: String, version: Semver.Version, source_id: SourceId)

class Target(
  kind: TargetKind,
  name: String,
  srcs: Array<String>,
  for_host: Bool,
)

base class TargetKind {
  children =
  // | LibTarget()
  | BinTarget(entry_point: String)
  | CustomBuildTarget()
}

private fun manifest_targets(
  manifest: TomlManifest,
  package_root: String,
): Array<Target> {
  res = mutable Vector[];

  srcs = FileSystem.readFilesRecursive(Path.join(package_root, "src"), f ->
    f.endsWith(".sk")
  ).toArray();
  for (bin in manifest.bin) {
    res.push(
      Target(BinTarget(bin.main), bin.name, srcs, /* for_host = */ false),
    )
  };

  build_script_path = Path.join(package_root, "build.sk");
  if (FileSystem.exists(build_script_path)) {
    res.push(
      Target(
        CustomBuildTarget(),
        `build-script-${manifest.name}`,
        Array[build_script_path],
        /* for_host = */ true,
      ),
    )
  };

  test_srcs = manifest.tests match {
  | Some(tests) -> tests
  | _ ->
    tests_path = Path.join(package_root, "tests");
    if (FileSystem.exists(tests_path)) {
      FileSystem.readFilesRecursive(tests_path, f ->
        f.endsWith(".sk")
      ).toArray()
    } else {
      Array[]
    }
  };
  test_harness = manifest.test_harness.default(kDefaultTestHarness);
  res.push(
    Target(BinTarget(test_harness), "test", test_srcs, /* for_host = */ false),
  );

  res.collect(Array)
}

module end;
