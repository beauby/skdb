module Skargo;

fun runner(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("run")
      .short("r")
      .about("Run the built host binary of the local package")
      .arg(Cli.StringArg("manifest-path").about("Path to Skargo.toml"))
      .arg(
        Cli.StringArg("target-dir").about(
          "Directory for all generated artifacts",
        ),
      )
      .arg(
        Cli.StringArg("profile").about(
          "Run the binary with the specified profile",
        ),
      )
      .arg(
        Cli.BoolArg("release")
          .short("r")
          .long("release")
          .about("Run the binary in release mode"),
      )
      .arg(Cli.StringArg("bin").about("Run the specified binary"))
      .extra(),
    args ~> gctxCmd(args, execRun),
  )
}

fun execRun(gctx: GlobalContext, args: Cli.ParseResults): void {
  ws = workspace(args, gctx);
  opts = CompileOptions{
    build_config => build_config(
      None(),
      args.maybeGetString("profile"),
      args.getBool("release"),
    ),
    filter => CompileFilterOnly{
      all_targets => false,
      lib => LibRuleFalse(),
      bins => args.maybeGetString("bin") match {
      | Some(bin) -> FilterRuleJust(Array[bin])
      | None() -> FilterRuleAll()
      },
      tests => FilterRuleJust(Array[]),
    },
  };
  bctx = create_bctx(gctx, ws, opts);
  withTimer(
    () -> {
      build_runner = BuildRunner::create(bctx);
      build_runner.compile()
    },
    t ->
      gctx.console.status(
        "Finished",
        `${opts.build_config.requested_profile} target(s) in ${t}s`,
      )
    ,
  );

  bins = bctx.roots
    .filter(unit -> unit.target.kind is BinTarget _)
    .collect(Array);
  if (bins.size() != 1) {
    gctx.console.error(
      "`skargo run` could not determine which binary to run. Use the `--bin` option to specify a binary.",
    );
    skipExit(1)
  };

  // TODO: Expose common API with BuildRunner.
  path = Path.join(
    ws.target_dir(),
    "host",
    opts.build_config.requested_profile,
  );
  binary = Path.join(path, bins[0].target.name);
  gctx.console.status("Running", `\`${binary}\``);
  cmd_args = Array[binary].concat(args.extra);
  Posix.execvp(cmd_args)
}

module end;
