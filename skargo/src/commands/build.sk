module Skargo;

fun build(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("build")
      .short("b")
      .about("Compile a local package")
      .arg(Cli.StringArg("manifest-path").about("Path to Skargo.toml"))
      .arg(Cli.StringArg("target").about("Build for the target triple"))
      .arg(
        Cli.StringArg("target-dir").about(
          "Directory for all generated artifacts",
        ),
      )
      .arg(
        Cli.StringArg("profile").about(
          "Build artifacts with the specified profile",
        ),
      )
      .arg(
        Cli.BoolArg("release")
          .short("r")
          .long("release")
          .about("Build artifacts in release mode, with optimizations"),
      )
      .arg(Cli.BoolArg("lib").about("Build only this package's library"))
      .arg(
        Cli.ArrayArg("bin")
          .about("Build only the specified binary")
          .default(Array[]),
      )
      .arg(Cli.BoolArg("bins").about("Build all binaries"))
      .arg(Cli.BoolArg("tests").about("Build all tests"))
      .arg(Cli.BoolArg("all-targets").about("Build all targets")),
    args ~> gctxCmd(args, execBuild),
  )
}

fun execBuild(gctx: GlobalContext, args: Cli.ParseResults): void {
  ws = workspace(args, gctx);
  opts = compile_options(args);
  bctx = create_bctx(gctx, ws, opts);
  withTimer(
    () -> {
      build_runner = BuildRunner::create(bctx);
      build_runner.compile()
    },
    t ->
      gctx.console.status(
        "Finished",
        `${opts.build_config.requested_profile} target(s) in ${t}s`,
      )
    ,
  );
}

module end;
