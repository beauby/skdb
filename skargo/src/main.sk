module Skargo;

fun getProfile(args: Cli.ParseResults): String {
  args.maybeGetString("profile") match {
  | Some(p) -> p
  | None() if (args.getBool("release")) -> kReleaseProfile
  | None() -> kDevProfile
  }
}

fun main(): void {
  cmd = Cli.Command("skargo")
    .about("Skip's package manager")
    .arg(
      Cli.BoolArg("version")
        .short("V")
        .long("version")
        .about("Print version info and exit"),
    )
    .arg(
      Cli.BoolArg("verbose")
        .short("v")
        .long("verbose")
        .about("Use verbose output")
        .global(),
    );
  suppliers = Array[
    check,
    build,
    test,
    runner,
    clean,
    format,
    init,
    update,
    help,
  ];
  commands = mutable Map[];
  for (supplier in suppliers) {
    (subcommand, cmdFn) = supplier();
    !cmd = cmd.subcommand(subcommand);
    commands.set(subcommand.name, cmdFn);
  };
  !cmd = cmd.help();
  args = cmd.parseArgs();
  if (args.getBool("version")) {
    print_string("skargo " + SkargoVersion.kVersion);
    skipExit(0);
  } else {
    args.maybeGetSubcommand() match {
    | Some(subcmd) ->
      commands.maybeGet(subcmd) match {
      | Some(handler) ->
        skipExit(
          try {
            handler(args);
            0
          } catch {
          | Skargo.SystemCallException(code, _) -> code
          | exn -> throw exn
          },
        )
      | _ -> invariant_violation(`Unknown subcommand ${subcmd}`)
      }
    | None() ->
      print_string(Cli.usage(args.cmd, true));
      skipExit(0)
    }
  };
}

fun getVerbosity(args: Cli.ParseResults): ConsoleVerbosity {
  // TODO: Properly support -q/--quiet for VerbosityQuiet, -v for VerbosityVerbose,
  // and -vv for VerbosityProlix.
  if (args.getBool("verbose")) {
    VerbosityProlix()
  } else {
    VerbosityNormal()
  }
}

fun gctxCmd(
  args: Cli.ParseResults,
  fn: (Cli.ParseResults, GlobalContext) ~> void,
): void {
  gctx = GlobalContext::create(getVerbosity(args));
  fn(args, gctx)
}

/********* Build **********/

fun build(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("build")
      .short("b")
      .about("Compile a local package")
      .arg(Cli.StringArg("manifest-path").about("Path to Skargo.toml"))
      .arg(Cli.StringArg("target").about("Build for the target triple"))
      .arg(
        Cli.StringArg("target-dir").about(
          "Directory for all generated artifacts",
        ),
      )
      .arg(
        Cli.StringArg("profile").about(
          "Build artifacts with the specified profile",
        ),
      )
      .arg(
        Cli.BoolArg("release")
          .short("r")
          .long("release")
          .about("Build artifacts in release mode, with optimizations"),
      )
      .arg(Cli.StringArg("bin").about("Build only the specified binary")),
    args ~> gctxCmd(args, execBuild),
  )
}

fun execBuild(args: Cli.ParseResults, gctx: GlobalContext): void {
  bc = BuildContext::create(
    gctx,
    args.maybeGetString("manifest-path"),
    args.maybeGetString("target"),
    args.maybeGetString("target-dir"),
    getProfile(args),
  );

  withTimer(
    () -> execBuildContext(bc, collectBinaries(args, gctx)),
    t ->
      bc.gctx.console.status(
        "Finished",
        `${bc.target_profile} target(s) in ${t}s`,
      )
    ,
  );
}

<<<<<<< HEAD
// fun collectBinaries(
//   args: Cli.ParseResults,
//   gctx: GlobalContext,
// ): Array<Target> {
//   args.maybeGetString("bin") match {
//   | Some(name) ->
//     env.manifest.targets.find(t ->
//       t.kind is BinTarget _ && t.name == name
//     ) match {
//     | Some(bin) -> Array[bin]
//     | None() -> invariant_violation(`Unknown binary ${name}`)
//     }
//   | None() ->
//     env.manifest.targets.filter(t -> t.kind is BinTarget _).collect(Array)
//   };
// }
||||||| parent of 41ad3b97 (wip)
fun collectBinaries(
  args: Cli.ParseResults,
  env: Env,
): Array<TomlManifestBinary> {
  args.maybeGetString("bin") match {
  | Some(name) ->
    env.manifest.bin.find(b -> b.name == name) match {
    | Some(bin) -> Array[bin]
    | None() -> invariant_violation(`Unknown binary ${name}`)
    }
  | None() -> env.manifest.bin
  };
}
=======
fun collectBinaries(args: Cli.ParseResults, env: Env): Array<Target> {
  args.maybeGetString("bin") match {
  | Some(name) ->
    env.manifest.targets.find(t ->
      t.kind is BinTarget _ && t.name == name
    ) match {
    | Some(bin) -> Array[bin]
    | None() -> invariant_violation(`Unknown binary ${name}`)
    }
  | None() ->
    env.manifest.targets.filter(t -> t.kind is BinTarget _).collect(Array)
  };
}
>>>>>>> 41ad3b97 (wip)

fun execBuildContext(
  bc: BuildContext,
<<<<<<< HEAD
  bins: Array<Target>,
  building: List<Manifest> = List.Nil(),
||||||| parent of 41ad3b97 (wip)
  bins: Array<TomlManifestBinary>,
  building: List<TomlManifest> = List.Nil(),
=======
  bins: Array<Target>,
  // building: List<Manifest> = List.Nil(),
>>>>>>> 41ad3b97 (wip)
): void {
  // checkBuildFiles(bc, false, building);
  genVersionFile(bc);
  for (bin in bins) {
<<<<<<< HEAD
    compile(bc, bin, bc.target_dir_for(bin))
||||||| parent of 41ad3b97 (wip)
    compile(bc, bin.name, bin.main)
=======
    bin match {
    | Target(BinTarget(main), name, _) -> compile(bc, name, main)
    | _ -> invariant_violation("unreachable")
    }
>>>>>>> 41ad3b97 (wip)
  };
}

/********* Test **********/

fun nproc(): Int {
  p = System.subprocess(Array["nproc"]);
  p.exitstatus match {
  | Posix.WExited(0) ->
    p.stdout.trim().toIntOption() match {
    | Some(n) -> n
    | None() -> 8
    }
  | _ -> 8
  };
}

fun test(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("test")
      .short("t")
      .about("Run the tests")
      .arg(Cli.StringArg("manifest-path").about("Path to Skargo.toml"))
      .arg(
        Cli.StringArg("filter")
          .positional()
          .about("If specified, only run tests with names matching the filter"),
      )
      .arg(
        Cli.IntArg("jobs")
          .long("jobs")
          .short("j")
          .default(nproc())
          .about("Number of parallel jobs, defaults to # of CPUs"),
      )
      .arg(Cli.StringArg("target").about("Check for the target triple"))
      .arg(
        Cli.StringArg("target-dir").about(
          "Directory for all generated artifacts",
        ),
      )
      .arg(
        Cli.StringArg("profile").about(
          "Build artifacts with the specified profile",
        ),
      )
      .arg(
        Cli.BoolArg("release")
          .short("r")
          .long("release")
          .about("Build artifacts in release mode, with optimizations"),
      )
      .arg(Cli.BoolArg("list").about("Display the list of available tests"))
      .arg(Cli.StringArg("junitxml").about("Generate a JUnit XML report")),
    args ~> gctxCmd(args, execTest),
  )
}

fun execTest(args: Cli.ParseResults, gctx: GlobalContext): void {
  bc = BuildContext::create(
    gctx,
    args.maybeGetString("manifest-path"),
    args.maybeGetString("target"),
    args.maybeGetString("target-dir"),
    getProfile(args),
  );
  // checkBuildFiles(bc, true, List.Nil());
  genVersionFile(bc);
  test_target = bc.package.manifest.targets
    .find(t -> t.name == "test")
    .fromSome();
  compile(bc, test_target, bc.target_dir_for(test_target));
  filter = args.maybeGetString("filter");
  junitxml = args.maybeGetString("junitxml").map(f -> `--junitxml=${f}`);
  jobs = args.getInt("jobs");
  list = if (args.getBool("list")) Some("--list") else None();
  testBinary = Path.join(bc.target_dir_for(test_target), "test");

  if (FileSystem.exists(testBinary)) {
    Posix.execvp(
      Array[testBinary].concat(
        Array[junitxml, filter, list, Some(`-j${jobs}`)].filterNone(),
      ),
    )
  } else {
    skipExit(1)
  }
}

/********* Check **********/

fun check(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("check")
      .short("c")
      .about(
        "Analyze the current package and report errors, but don't build object files",
      )
      .arg(Cli.StringArg("manifest-path").about("Path to Skargo.toml"))
      .arg(Cli.StringArg("target").about("Check for the target triple"))
      .arg(
        Cli.StringArg("target-dir").about(
          "Directory for all generated artifacts",
        ),
      )
      .arg(
        Cli.StringArg("profile").about(
          "Build artifacts with the specified profile",
        ),
      )
      .arg(
        Cli.BoolArg("release")
          .short("r")
          .long("release")
          .about("Build artifacts in release mode, with optimizations"),
      ),
    args ~> gctxCmd(args, execCheck),
  )
}

fun execCheck(args: Cli.ParseResults, gctx: GlobalContext): void {
  if (env.config.formatOnCheck) {
    execFmt(args, gctx)
  };
  bc = BuildContext::create(
    gctx,
    args.maybeGetString("manifest-path"),
    args.maybeGetString("target"),
    args.maybeGetString("target-dir"),
    getProfile(args),
  );
  genVersionFile(bc);
  invokeSkc(bc, Array["--check"])
}

/********* Clean **********/

fun clean(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("clean")
      .about("Remove the target directory")
      .arg(Cli.StringArg("manifest-path").about("Path to Skargo.toml"))
      .arg(Cli.StringArg("target").about("Build for the target triple"))
      .arg(
        Cli.StringArg("target-dir").about(
          "Directory for all generated artifacts",
        ),
      )
      .arg(
        Cli.StringArg("profile").about(
          "Build artifacts with the specified profile",
        ),
      )
      .arg(
        Cli.BoolArg("release")
          .short("r")
          .long("release")
          .about("Build artifacts in release mode, with optimizations"),
      ),
    args ~> gctxCmd(args, execClean),
  )
}

fun execClean(args: Cli.ParseResults, gctx: GlobalContext): void {
  bc = BuildContext::create(
    gctx,
    args.maybeGetString("manifest-path"),
    args.maybeGetString("target"),
    args.maybeGetString("target-dir"),
    getProfile(args),
  );
  // TODO: Clean only for a specific arch specified with `--target`?
  run(Array["rm", "-rf", bc.target_dir], gctx.console)
}

/********* Format **********/

fun format(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("fmt")
      .about("Format all files using skfmt")
      .arg(Cli.StringArg("manifest-path").about("Path to Skargo.toml")),
    args ~> gctxCmd(args, execFmt),
  )
}

fun execFmt(args: Cli.ParseResults, gctx: GlobalContext): void {
  bc = BuildContext::create(
    gctx,
    args.maybeGetString("manifest-path"),
    args.maybeGetString("target"),
    args.maybeGetString("target-dir"),
    getProfile(args),
  );
  files = FileSystem.readFilesRecursive(bc.package.root(), f ->
    f.endsWith(".sk")
  ).toArray();
  run(Array["skfmt", "-i"].concat(files), gctx.console);
}

/********* Init **********/

fun init(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("init")
      .about("Create a new skargo package")
      .arg(
        Cli.StringArg("path")
          .positional()
          .default(".")
          .about("Directory where to perform the initialization"),
      )
      .arg(
        Cli.StringArg("test-harness")
          .short("t")
          .long("test-harness")
          .about("Specify the test harness"),
      ),
    execInit,
  )
}

fun execInit(args: Cli.ParseResults): void {
  path = args
    .maybeGetString("path")
    .map(p -> Path.resolve(p))
    .default(getcwd());
  _ = system("mkdir -p " + path);
  rootDir = path;
  optManifestFile = loop {
    if (FileSystem.exists(Path.join(path, Skargo.kManifestFile))) {
      break Some(path)
    };
    if (Path.isRoot(path)) {
      break None()
    };
    !path = Path.parentname(path)
  };
  optManifestFile match {
  | Some(manifestFile) ->
    print_string(`\`${Path.parentname(manifestFile)}\` already initialized.`)
  | _ ->
    manifestFile = Path.join(rootDir, Skargo.kManifestFile);
    name = Path.basename(rootDir);
    FileSystem.writeTextFile(
      manifestFile,
      generateManifestTemplate(name, args.maybeGetString("test-harness")),
    );
    srcDir = Path.join(rootDir, "src");
    _ = system("mkdir -p " + srcDir)
  }
}

/********* Udapte **********/

fun update(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("update").about("Update dependencies listed in Skargo.lock"),
    args ~> gctxCmd(args, execUpdate),
  )
}

fun execUpdate(_args: Cli.ParseResults, _gctx: GlobalContext): void {
  invariant_violation("TODO");
  void
}

/********* Help **********/

fun help(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("help")
      .arg(
        Cli.StringArg("command")
          .positional()
          .about(
            "If specified, the subcommand for which help is to be displayed",
          ),
      )
      .about("Displays help for a skargo subcommand"),
    execHelp,
  )
}

fun execHelp(args: Cli.ParseResults): void {
  optSubcmd = args.maybeGetString("command");
  optSubcmd.flatMap(subcmd ->
    args.cmd._subcommands.filter(cmd -> cmd.name == subcmd).maybeGet(0)
  ) match {
  | Some(cmd) -> print_string(Cli.usage(cmd, true, Some(args.cmd)))
  | _ ->
    optSubcmd match {
    | Some(subcmd) -> print_error(`error: Invalid subcommand ${subcmd}.`)
    | _ -> print_error("error: No subcommand specified.")
    };
    print_string(Cli.usage(args.cmd, true))
  };
}

/********* Run **********/

fun runner(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("run")
      .short("r")
      .about("Run the built host binary of the local package")
      .arg(
        Cli.StringArg("profile").about(
          "Run the binary with the specified profile",
        ),
      )
      .arg(
        Cli.BoolArg("release")
          .short("r")
          .long("release")
          .about("Run the binary in release mode"),
      )
      .arg(Cli.StringArg("bin").about("Run the specified binary"))
      .arg(Cli.StringArg("manifest-path").about("Path to Skargo.toml"))
      .extra(),
    execRun,
  )
}

fun execRun(_args: Cli.ParseResults): void {
  // env = args.maybeGetString("path") match {
  // | Some(path) ->
  //   manifestFile = Path.join(Path.resolve(path), Skargo.kManifestFile);
  //   invariant(
  //     FileSystem.exists(manifestFile),
  //     `Invalid skargo directory ${path}`,
  //   );
  //   Env::fromFile(manifestFile, getVerbosity(args))
  // | _ -> Env::create(getVerbosity(args))
  // };
  // bins = collectBinaries(args, env);
  // invariant(!bins.isEmpty(), "No binary to run");
  // invariant(bins.size() == 1, "Multiple binary please select one");
  // hostBinary = BuildContext::hostBinary(
  //   env,
  //   getProfile(args),
  //   bins.first().name,
  // );
  // invariant(FileSystem.exists(hostBinary), "No binary to run, build first");
  // cmdArgs = Array[hostBinary].concat(args.extra);
  // env.console.status_verbose("Running", cmdArgs.join(" "));
  // Posix.execvp(cmdArgs)
  void
}

module end;
