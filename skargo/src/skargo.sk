module Skargo;

const kManifestFile: String = "Skargo.toml";
const kVersionFile: String = "version.sk";
const kDevProfile: String = "dev";
const kReleaseProfile: String = "release";
const kDebugProfile: String = "debug";
const kDefaultTarget: String = "host";
const kTargetDir: String = "target";

private fun run(args: Array<String>, console: Console): void {
  console.status_verbose("Running", args.join(" "));
  (stdout_cb, stderr_cb) = if (console.verbosity >= VerbosityProlix()) {
    (print_raw, print_error_raw)
  } else {
    ((_) -> void, (_) -> void)
  };

  p = System.subprocess(args, stdout_cb, stderr_cb);
  if (!p.success()) {
    console.error(
      "command exited with non-zero status\n\n" +
        "Caused by:\n" +
        "  process did not exit successfully: \`" +
        args[0] +
        `\` (exit status: ${p.exitcode()})\n` +
        "  --- stdout\n" +
        p.stdout.split("\n").map(l -> "  " + l).join("\n") +
        "\n" +
        "  --- stderr\n" +
        p.stderr.split("\n").map(l -> "  " + l).join("\n") +
        "\n",
    );
    skipExit(p.exitcode());
  }
}

const errorMappingAbort: Int = 6;
const errorMappingFailed: Int = 41;
const errorMappingMemory: Int = 42;
const errorMappingVersion: Int = 43;
const errorChangingCont: Int = 22;

fun isMappingError(code: Int): Bool {
  code == errorMappingAbort ||
    code == errorMappingFailed ||
    code == errorMappingMemory ||
    code == errorMappingVersion ||
    code == errorChangingCont
}

module end;
