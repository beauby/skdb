/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

fun createOptimizedFunctions(
  context: mutable SKStore.Context,
  env: GlobalEnv,
  config: Config.Config,
): GlobalEnv {
  runCompilerPhase("native/compile", () -> {
    !env = Optimize.compileAll(context, env, config);

    // Find all the functions that are still reachable from the root set,
    // post-inlining, dead code elimination, etc.
    !env.sfuns = findAllReachableFuns(
      keep -> {
        // Seed the "reachable" recursion with functions we definitely
        // need to emit.
        keep(env.initializeAllConstsID);
        for (f in env.sfuns) {
          if (f.isDisasm || f.isRuntimeExport) {
            keep(f.id)
          }
        };
        env.runtimeFunctions.values().each(keep)
      },
      env,
    );

    // Now that we have computed the fields for all of the various
    // coroutine classes, we can finally analyze pointer escape info.
    !env = Escape.computeWhetherPointersCanEscape(env);

    // optimize.sk steps (5) Lower + (6) Lay out vtables.
    !env = Lower.lowerFunctions(env, config)
  });

  env
}

fun link(
  llFile: String,
  config: Config.Config,
  exports: Array<String> = Array[],
): void {
  if (config.isWasm()) {
    output = config.output;
    bcFile = output + ".bc";
    runShell(
      Array["llvm-link", llFile].concat(Array["-o", bcFile]),
      config.verbose,
    );
    oFile = output + ".o";
    runShell(
      Array[
        "llc",
        "-mtriple=wasm32-unknown-unknown",
        `-O${config.optLevel}`,
        "-filetype=obj",
        bcFile,
        "-o",
        oFile,
      ],
      config.verbose,
    );
    // TODO: Proper mechanism to select exports.
    exportJs = exports
      .concat(
        Array[
          "getCompositeName",
          "getCompositeSize",
          "getCompositeAt",
          "SKIP_String_byteSize",
          "getLeafValue",
          "objectKind",
          "SKIP_call0",
          "SKIP_Obstack_alloc",
          "skip_main",
          "SKIP_init_jsroots",
          "SKIP_add_root",
          "SKIP_remove_root",
          "SKIP_tracked_call",
          "SKIP_tracked_query",
          "sk_string_create",
          "SKIP_initializeSkip",
          "SKIP_skfs_init",
          "SKIP_skfs_end_of_init",
          "SKIP_get_persistent_size",
          "sk_pop_dirty_page",
          "SKIP_get_version",
          "SKIP_throw_EndOfFile",
          "SKIP_new_Obstack",
          "SKIP_destroy_Obstack",
          "getVersion",
          "__heap_base",
        ],
      )
      .map(x -> `-export=${x}`);
    runShell(
      Array[
        "wasm-ld",
        "--initial-memory=1073741824",
        oFile,
        "-o",
        output,
        "--no-entry",
        "-allow-undefined",
      ].concat(exportJs),
      config.verbose,
    );
  } else {
    runShell(
      Array[
        "clang++",
        "-no-pie",
        `-O${config.optLevel}`,
        "-mllvm",
        "-inline-threshold=0",
        "-o",
        config.output,
        llFile,
      ].concat(config.libraries.map(x -> `-l${x}`)).concat(
        config.libraryPaths.map(x -> `-L ${x}`),
      ),
      config.verbose,
    );
  }
}

fun runShell(args: Array<String>, verbose: Bool = false): void {
  if (verbose) {
    print_error(">> " + args.join(" "))
  };
  p = System.subprocess(
    args,
    s -> {
      if (verbose) {
        print_error_raw(s)
      }
    },
    s -> {
      if (verbose) {
        print_error_raw(s)
      }
    },
  );
  if (!p.success()) {
    if (!verbose) {
      print_error_raw(p.stderr)
    };
    skipExit(1)
  }
}

fun ensureCompatibleLLVMVersion(): void {
  kLLVMVersion = "15.";

  p = System.subprocess(Array["llvm-config", "--version"]);
  if (!p.success()) {
    print_error_raw(p.stderr);
    skipExit(1)
  } else if (!p.stdout.startsWith(kLLVMVersion)) {
    print_error(
      `Incompatible llvm version ${p.stdout}, expected LLVM ${kLLVMVersion}`,
    );
    skipExit(1)
  }
}

class TickConfigFile(value: (Int, Config.Config)) extends SKStore.File

// TODO: Hashes in the precompiled libraries filenames.
fun resolveDependency(dep: String, paths: Array<String>): String {
  if (dep.contains("=")) {
    // TODO: Verify the provided path.
    candidate = dep.splitFirst("=").i1;
    if (FileSystem.exists(candidate)) {
      return candidate
    }
  } else {
    for (path in paths) {
      candidate = Path.join(path, dep + ".sklib");
      if (FileSystem.exists(candidate)) {
        return candidate
      }
    }
  };

  // TODO: Proper exception.
  invariant_violation(`Dependency not found ${dep}`)
}

fun resolveStaticLibrary(lib: String, libraryPaths: Sequence<String>): String {
  // Explicit path.
  if (lib.contains("/")) {
    lib
  } else {
    // TODO: Keep only paths starting with `static=`.
    for (path in libraryPaths) {
      if (FileSystem.exists(Path.join(path, lib))) {
        break Path.join(path, lib)
      }
    } else {
      // TODO: Proper error.
      invariant_violation(`Could not find library ${lib}`)
    }
  }
}

fun compile(
  config: Config.Config,
  context: mutable SKStore.Context,
  fileNames: Array<String>,
): void {
  // Convert project:program-unit targets to a list of source files.

  if (fileNames.isEmpty()) {
    print_error("fatal error: no input files\n");
    skipExit(4); // Exit code used by g++ for no input files
  };

  ensureCompatibleLLVMVersion();

  if (context.unsafeMaybeGetDir(FileCache.fileDirName) is None()) {
    _ = context.mkdir(x ~> x, x ~> x, FileCache.fileDirName, Array[]);
    _ = context.mkdir(x ~> x, x ~> x, FileCache.fileTimeDirName, Array[]);
    _ = context.mkdir(x ~> x, x ~> x, FileCache.allFilesDirName, Array[]);
  };

  FileCache.writeFiles(context, fileNames.concat(dependencies).collect(Array));

  backendDirName = SKStore.DirName::create("/backend/");
  backendSinkDirName = SKStore.DirName::create("/backendSink/");

  if (context.unsafeMaybeGetEagerDir(backendDirName) is None()) {
    outerIst = OuterIstToIR.makeOuterIst(context);

    defsProj = outerIst.getFunsProj(context);
    constsProj = outerIst.getConstsProj(context);

    converter = OuterIstToIR.Converter::create(
      context,
      config,
      SKStore.DirName::create("/converter/"),
      outerIst,
    );

    backendDir = context.mkdir(
      SKStore.IID::keyType,
      TickConfigFile::type,
      backendDirName,
      Array[(SKStore.IID(0), TickConfigFile((-128, config)))],
    );

    _ = backendDir.map(
      SKStore.SID::keyType,
      TickConfigFile::type,
      context,
      backendSinkDirName,
      (context, _writer, _key, values) ~> {
        (_, conf) = TickConfigFile::type(values.first).value;

        context.getGlobal("ERRORS") match {
        | None() -> void
        | Some(errors) ->
          SkipError.printErrorsAndExit(
            SkipError.ErrorsFile::type(errors).value.reversed().toArray(),
          )
        };

        if (conf.check) {
          return void;
        };

        // Create a filter for what functions to compile.
        shouldRuntimeExport = (
          funDef ~>
            AsmOutput.cppIsExported(
              funDef.origName,
              funDef.annotations,
              funDef.getPos(),
              conf.exportedAsFunctions,
              conf.isWasm(),
            )
        );

        // Are we in "disassemble" mode?
        disasm = (
          conf.disasmAll ||
          conf.disasmAnnotated ||
          !conf.disasmFiles.isEmpty() ||
          !conf.disasmFunctions.isEmpty()
        );

        // Create a filter for what functions to disassemble.
        //
        // Note that for "disasmAll" we do not return true, since we only want
        // to disassemble code which is actually used, and returning true would
        // force everything to be compiled just so it could be disassembled.
        shouldDisasm = (
          funDef ~>
            disasm &&
              (conf.disasmFunctions.contains(funDef.origName) ||
                (conf.disasmAnnotated &&
                  annotationsContain(
                    funDef.annotations,
                    "@disasm",
                    funDef.getPos(),
                  )))
        );

        env = OuterIstToIR.createIR(
          context,
          conf,
          shouldDisasm,
          shouldRuntimeExport,
          outerIst,
          converter,
          constsProj,
          defsProj,
        );

        !env = createOptimizedFunctions(context, env, conf);
        defs = runCompilerPhase("native/create_asm_graph", () -> {
          AsmOutput.createAsmDefGraph(env, conf)
        });

        runCompilerPhase("native/merge_asm_graph", () -> {
          AsmOutput.mergeIdenticalAsmDefs(defs, conf.verbose)
        });

        runCompilerPhase("native/create_asm_symbols", () -> {
          AsmOutput.assignFinalSymbols(defs)
        });

        conf.emit match {
        | "llvm-ir" ->
          runCompilerPhase("native/write_asm_files", () -> {
            AsmOutput.writeOutputFiles(defs, fileNames, conf.output, conf)
          })
        | "sklib" ->
          runCompilerPhase("native/write_sklib", () -> {
            ar_file = IO.File::open(
              conf.output,
              IO.OpenOptions{write => true, create => true, create_new => true},
            );
            ar = ARParser.Builder::create(ar_file);
            // Add concatenated skip sources as `src.sk`.
            ar.append_id(
              "src.sk",
              // TODO: In-memory concatenation could be avoided.
              fileNames
                .map(path -> FileSystem.readTextFile(path))
                .join("")
                .bytes(),
            ) match {
            | Failure(err) -> throw err
            | Success _ -> void
            };

            // Add metadata file (text file containing -L/-l options).
            // NOTE: The "static=" directive tells `skc` to bundle the corresponding
            // archive into the `sklib`, while other libraries (including static system
            // libraries) are left for the llvm linker to resolve and link.
            static_libs = mutable Vector[];
            skip_libs = mutable Vector[];
            other_libs = mutable Vector[];
            for (l in conf.libraries) {
              if (l.startsWith("static=")) {
                static_libs.push(resolveDependency(l.stripPrefix("static=")))
              } else if (l.startsWith("skip=")) {
                skip_libs.push(resolveDependency(l.stripPrefix("skip=")))
              } else {
                other_libs.push(l);
              }
            };
            ar.append_id(
              "lib.skmeta",
              // TODO: Proper serialization format.
              // Currently the format is: link line first, then one line per .sklib.
              (other_libs
                .map(x -> `-l${x}`)
                .collect(Array)
                // TODO: Filter out `-L static=/foo/bar` if/when we support it.
                .concat(conf.libraryPaths.map(x -> `-L${x}`))
                .join(" ") +
                "\n" +
                skip_libs.join("\n")).bytes(),
            ) match {
            | Failure(err) -> throw err
            | Success _ -> void
            };

            // For each `-l static=foo.a`, dump .o files from `foo.a` into the sklib.
            for (lib in static_libs) {
              lib_path = resolveStaticLibrary(lib, config.libraryPaths);
              lib_file = IO.File::open(lib_path, IO.OpenOptions{read => true});
              lib_ar = ARParser.Archive::read(lib_file) match {
              | Success(v) -> v
              | Failure(err) -> throw err
              };
              for ((obj_file_header, obj_file) in lib_ar.items()) {
                ar.append(
                  obj_file_header,
                  Bytes.Cursor::create(obj_file),
                ) match {
                | Failure(err) -> throw err
                | Success _ -> void
                }
              };
              lib_file.close()
            };

            // TODO:
            // Add symbol table if necessary.

            ar_file.close()
          })
        | "link" ->
          // TODO: Use `mkstemp()` instead.
          llFile = conf.output + ".ll";
          runCompilerPhase("native/write_asm_files", () -> {
            AsmOutput.writeOutputFiles(defs, fileNames, llFile, conf)
          });

          wasm_exports = outerIst
            .getFuns(context, defsProj)
            .filter(f ->
              annotationsContainParam(
                f.annotations,
                "@wasm_export",
                f.getPos(),
              ).isSome() ||
                annotationsContainParam(
                  f.annotations,
                  "@export",
                  f.getPos(),
                ).isSome()
            )
            .map(exportName);

          runCompilerPhase("native/link", () -> {
            link(llFile, conf, wasm_exports)
          })
        | _ ->
          invariant_violation("Unsupported value for `--emit`: " + conf.emit)
        }
      },
    );
  } else {
    context
      .unsafeGetEagerDir(backendDirName)
      .writeArray(
        context,
        SKStore.IID(0),
        Array[TickConfigFile((context.tick.value, config))],
      );
  };
  context.update()
}

fun exportName(f: OuterIst.FunDef): String {
  pos = f.getPos();
  annotationsContainParam(f.annotations, "@wasm_export", pos) match {
  | Some(s) if (!s.isEmpty()) -> return s
  | _ -> void
  };
  annotationsContainParam(f.annotations, "@export", pos) match {
  | Some(s) if (!s.isEmpty()) -> return s
  | _ -> void
  };
  "SKIP_" + AsmOutput.mangle(f.origName)
}
